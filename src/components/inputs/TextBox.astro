---
import { cva } from "cva";
import { twMerge } from "tailwind-merge";
import type { VariantProps } from "cva";
import type { HTMLAttributes } from "astro/types";
import type { ClassName } from "src/types/global";

const textbox = cva(["[&_input]:outline-none"],{
    variants: {
        intent: {
            primary: [
                "[&_label]:font-semibold",
                "[&_label]:block",
                "[&_input]:w-full [&_input]:h-12 [&_input]:pl-4",
                "[&_input]:text-WIblack [&_input]:text-opacity-60 [&_input]:font-semibold",
                "[&_input]:border-current [&_input]:border-[1.5px] [&_input]:rounded-md"
            ]
        }
    }
});

interface Props extends HTMLAttributes<"input">,
    VariantProps<typeof textbox>{
        label?: string;
        className?: ClassName;
        iconConfirm?: boolean;
};

const { label, iconConfirm, intent = "primary", className, id, name, placeholder = "", ...inptProps } = Astro.props;
---

<div id={name && `containerFor:${name.toUpperCase()}`} class={twMerge([textbox({intent}), className])}>
    {label &&
    <label id={name && `labelFor:${name.toUpperCase()}`} for={name}>{label}</label>}
    <input {...inptProps} id={id || name} name={name || id} class:list={[iconConfirm && "svg-icon", "input-validation"]} placeholder={placeholder}/>
</div>

<style>
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    .svg-icon:valid{
        background-image: url("/svg/CheckBoxIcon.svg");
        background-size: 24px;
        background-repeat: no-repeat;
        background-position: right 5% bottom 50%;
    }

    .input-validation:not(:placeholder-shown):invalid{
        @apply border-red-600;
    }
    div:has(:not(input:placeholder-shown):invalid) > label{
        @apply after:content-['\0000a0*'] after:text-red-600;
    }
</style>