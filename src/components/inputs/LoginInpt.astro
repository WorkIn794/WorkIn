---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"input">{
    form: string;
    name: string;
    type: "email" | "password";
    label: "Email Address" | "Password";
};

const {form, name, type, label, ...props } = Astro.props;
---

<div class="w-full h-16 p-2 border-WIgrey border-1 flex flex-col-reverse
    transition-all duration-200 ease-in-out
    has-[:focus:valid]:border-l-WIblue-input has-[:focus]:border-l-4
    has-[:focus:invalid]:border-l-red-600">
    <input {...props} form={form} id={name} name={name} type={type} class="text-WIblue font-semibold outline-none peer" required/>
    <label for={name} data-type="formInpt"
        class:list={["value-empty",
        `text-WIblack
            transition-all duration-200 ease-in-out
            after:content-['*'] after:text-red-600 after:hidden
            hover:cursor-text
            peer-valid:after:hidden
            peer-focus:translate-y-0 peer-focus:text-sm peer-focus:text-opacity-60`]}>
        {label}
    </label>
</div>

<script>
    const labels: NodeListOf<HTMLLabelElement> = document.querySelectorAll("div label[data-type=\"formInpt\"]");
    labels.forEach(label => label.addEventListener("click",
        () => {
            const input: HTMLInputElement = label.previousElementSibling as HTMLInputElement;

            input.addEventListener("focusout", () => input.validity.valid ?
                label.classList.replace("after:inline", "after:hidden") :
                label.classList.replace("after:hidden", "after:inline"));
            input.addEventListener("blur", () => input.value ?
                label.classList.replace("value-empty", "value-filled") :
                label.classList.replace("value-filled", "value-empty")
            );
        }
    ));
</script>

<style>
@tailwind base;
@tailwind components;
@tailwind utilities;

.value-empty{
    @apply text-opacity-100 text-base translate-y-full;
}
.value-filled{
    @apply text-opacity-60 text-sm translate-y-0;
}
</style>